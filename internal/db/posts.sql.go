// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: posts.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (title, description, url, published_at, feed_id)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, title, description, url, published_at, feed_id, created_at, updated_at
`

type CreatePostParams struct {
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
	Url         string         `json:"url"`
	PublishedAt sql.NullTime   `json:"published_at"`
	FeedID      uuid.UUID      `json:"feed_id"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.Title,
		arg.Description,
		arg.Url,
		arg.PublishedAt,
		arg.FeedID,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Url,
		&i.PublishedAt,
		&i.FeedID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPostsByUser = `-- name: GetPostsByUser :many
SELECT p.id, title, description, p.url, published_at, feed_id, p.created_at, p.updated_at, f.id, name, f.url, user_id, f.created_at, f.updated_at, last_fetched_at FROM posts p
LEFT JOIN feeds f ON p.feed_id = f.id
WHERE f.user_id = $1
ORDER BY published_at DESC
LIMIT $2 OFFSET $3
`

type GetPostsByUserParams struct {
	UserID uuid.UUID `json:"user_id"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

type GetPostsByUserRow struct {
	ID            int32          `json:"id"`
	Title         string         `json:"title"`
	Description   sql.NullString `json:"description"`
	Url           string         `json:"url"`
	PublishedAt   sql.NullTime   `json:"published_at"`
	FeedID        uuid.UUID      `json:"feed_id"`
	CreatedAt     time.Time      `json:"created_at"`
	UpdatedAt     time.Time      `json:"updated_at"`
	ID_2          uuid.NullUUID  `json:"id_2"`
	Name          sql.NullString `json:"name"`
	Url_2         sql.NullString `json:"url_2"`
	UserID        uuid.NullUUID  `json:"user_id"`
	CreatedAt_2   sql.NullTime   `json:"created_at_2"`
	UpdatedAt_2   sql.NullTime   `json:"updated_at_2"`
	LastFetchedAt sql.NullTime   `json:"last_fetched_at"`
}

func (q *Queries) GetPostsByUser(ctx context.Context, arg GetPostsByUserParams) ([]GetPostsByUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostsByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsByUserRow
	for rows.Next() {
		var i GetPostsByUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Url,
			&i.PublishedAt,
			&i.FeedID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID_2,
			&i.Name,
			&i.Url_2,
			&i.UserID,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.LastFetchedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
